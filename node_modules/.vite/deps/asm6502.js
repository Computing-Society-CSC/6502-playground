import "./chunk-BUSYA2B4.js";

// node_modules/asm6502/src/parser.js
function peg$subclass(child, parent) {
  function C() {
    this.constructor = child;
  }
  C.prototype = parent.prototype;
  child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, " ");
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = last - s.column || 1;
      str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};
peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return '"' + literalEscape(expectation.text) + '"';
    },
    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
      });
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },
    any: function() {
      return "any character";
    },
    end: function() {
      return "end of input";
    },
    other: function(expectation) {
      return expectation.description;
    }
  };
  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }
  function literalEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
      return "\\x0" + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
      return "\\x" + hex(ch);
    });
  }
  function classEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
      return "\\x0" + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
      return "\\x" + hex(ch);
    });
  }
  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }
  function describeExpected(expected2) {
    var descriptions = expected2.map(describeExpectation);
    var i, j;
    descriptions.sort();
    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }
    switch (descriptions.length) {
      case 1:
        return descriptions[0];
      case 2:
        return descriptions[0] + " or " + descriptions[1];
      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }
  function describeFound(found2) {
    return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
  }
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
function peg$parse(input, options) {
  options = options !== void 0 ? options : {};
  var peg$FAILED = {};
  var peg$source = options.grammarSource;
  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;
  var peg$c0 = "\n";
  var peg$c1 = "#";
  var peg$c2 = "(";
  var peg$c3 = ")";
  var peg$c4 = ",";
  var peg$c5 = ".";
  var peg$c6 = ";";
  var peg$c7 = ":";
  var peg$c8 = '"';
  var peg$c9 = "%";
  var peg$c10 = "$";
  var peg$c11 = "adc";
  var peg$c12 = "and";
  var peg$c13 = "asl";
  var peg$c14 = "bcc";
  var peg$c15 = "bcs";
  var peg$c16 = "beq";
  var peg$c17 = "bit";
  var peg$c18 = "bmi";
  var peg$c19 = "bne";
  var peg$c20 = "bpl";
  var peg$c21 = "bra";
  var peg$c22 = "brk";
  var peg$c23 = "bvc";
  var peg$c24 = "bvs";
  var peg$c25 = "clc";
  var peg$c26 = "cld";
  var peg$c27 = "cli";
  var peg$c28 = "clv";
  var peg$c29 = "cmp";
  var peg$c30 = "cpx";
  var peg$c31 = "cpy";
  var peg$c32 = "dec";
  var peg$c33 = "dex";
  var peg$c34 = "dey";
  var peg$c35 = "eor";
  var peg$c36 = "inc";
  var peg$c37 = "inx";
  var peg$c38 = "iny";
  var peg$c39 = "jmp";
  var peg$c40 = "jsr";
  var peg$c41 = "lda";
  var peg$c42 = "ldy";
  var peg$c43 = "ldx";
  var peg$c44 = "lsr";
  var peg$c45 = "nop";
  var peg$c46 = "ora";
  var peg$c47 = "pha";
  var peg$c48 = "phx";
  var peg$c49 = "phy";
  var peg$c50 = "php";
  var peg$c51 = "pla";
  var peg$c52 = "plp";
  var peg$c53 = "ply";
  var peg$c54 = "rol";
  var peg$c55 = "ror";
  var peg$c56 = "rti";
  var peg$c57 = "rts";
  var peg$c58 = "sbc";
  var peg$c59 = "sec";
  var peg$c60 = "sed";
  var peg$c61 = "sei";
  var peg$c62 = "sta";
  var peg$c63 = "stx";
  var peg$c64 = "sty";
  var peg$c65 = "stz";
  var peg$c66 = "tax";
  var peg$c67 = "tay";
  var peg$c68 = "tsx";
  var peg$c69 = "txa";
  var peg$c70 = "txs";
  var peg$c71 = "tya";
  var peg$r0 = /^[x]/;
  var peg$r1 = /^[y]/;
  var peg$r2 = /^[+=*]/;
  var peg$r3 = /^[^\n]/;
  var peg$r4 = /^[xy]/;
  var peg$r5 = /^[@A-Z0-9_]/i;
  var peg$r6 = /^[^"]/;
  var peg$r7 = /^[0-1]/;
  var peg$r8 = /^[0-9]/;
  var peg$r9 = /^[0-9A-F]/i;
  var peg$r10 = /^[ \t]/;
  var peg$e0 = peg$literalExpectation("\n", false);
  var peg$e1 = peg$literalExpectation("#", false);
  var peg$e2 = peg$literalExpectation("(", false);
  var peg$e3 = peg$literalExpectation(")", false);
  var peg$e4 = peg$literalExpectation(",", false);
  var peg$e5 = peg$classExpectation(["x"], false, false);
  var peg$e6 = peg$classExpectation(["y"], false, false);
  var peg$e7 = peg$literalExpectation(".", false);
  var peg$e8 = peg$classExpectation(["+", "=", "*"], false, false);
  var peg$e9 = peg$literalExpectation(";", false);
  var peg$e10 = peg$classExpectation(["\n"], true, false);
  var peg$e11 = peg$classExpectation(["x", "y"], false, false);
  var peg$e12 = peg$literalExpectation(":", false);
  var peg$e13 = peg$classExpectation(
    ["@", ["A", "Z"], ["0", "9"], "_"],
    false,
    true
  );
  var peg$e14 = peg$literalExpectation('"', false);
  var peg$e15 = peg$classExpectation(['"'], true, false);
  var peg$e16 = peg$literalExpectation("%", false);
  var peg$e17 = peg$classExpectation([["0", "1"]], false, false);
  var peg$e18 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e19 = peg$literalExpectation("$", false);
  var peg$e20 = peg$classExpectation(
    [
      ["0", "9"],
      ["A", "F"]
    ],
    false,
    true
  );
  var peg$e21 = peg$classExpectation([" ", "	"], false, false);
  var peg$e22 = peg$literalExpectation("ADC", true);
  var peg$e23 = peg$literalExpectation("AND", true);
  var peg$e24 = peg$literalExpectation("ASL", true);
  var peg$e25 = peg$literalExpectation("BCC", true);
  var peg$e26 = peg$literalExpectation("BCS", true);
  var peg$e27 = peg$literalExpectation("BEQ", true);
  var peg$e28 = peg$literalExpectation("BIT", true);
  var peg$e29 = peg$literalExpectation("BMI", true);
  var peg$e30 = peg$literalExpectation("BNE", true);
  var peg$e31 = peg$literalExpectation("BPL", true);
  var peg$e32 = peg$literalExpectation("BRA", true);
  var peg$e33 = peg$literalExpectation("BRK", true);
  var peg$e34 = peg$literalExpectation("BVC", true);
  var peg$e35 = peg$literalExpectation("BVS", true);
  var peg$e36 = peg$literalExpectation("CLC", true);
  var peg$e37 = peg$literalExpectation("CLD", true);
  var peg$e38 = peg$literalExpectation("CLI", true);
  var peg$e39 = peg$literalExpectation("CLV", true);
  var peg$e40 = peg$literalExpectation("CMP", true);
  var peg$e41 = peg$literalExpectation("CPX", true);
  var peg$e42 = peg$literalExpectation("CPY", true);
  var peg$e43 = peg$literalExpectation("DEC", true);
  var peg$e44 = peg$literalExpectation("DEX", true);
  var peg$e45 = peg$literalExpectation("DEY", true);
  var peg$e46 = peg$literalExpectation("EOR", true);
  var peg$e47 = peg$literalExpectation("INC", true);
  var peg$e48 = peg$literalExpectation("INX", true);
  var peg$e49 = peg$literalExpectation("INY", true);
  var peg$e50 = peg$literalExpectation("JMP", true);
  var peg$e51 = peg$literalExpectation("JSR", true);
  var peg$e52 = peg$literalExpectation("LDA", true);
  var peg$e53 = peg$literalExpectation("LDY", true);
  var peg$e54 = peg$literalExpectation("LDX", true);
  var peg$e55 = peg$literalExpectation("LSR", true);
  var peg$e56 = peg$literalExpectation("NOP", true);
  var peg$e57 = peg$literalExpectation("ORA", true);
  var peg$e58 = peg$literalExpectation("PHA", true);
  var peg$e59 = peg$literalExpectation("PHX", true);
  var peg$e60 = peg$literalExpectation("PHY", true);
  var peg$e61 = peg$literalExpectation("PHP", true);
  var peg$e62 = peg$literalExpectation("PLA", true);
  var peg$e63 = peg$literalExpectation("PLP", true);
  var peg$e64 = peg$literalExpectation("PLY", true);
  var peg$e65 = peg$literalExpectation("ROL", true);
  var peg$e66 = peg$literalExpectation("ROR", true);
  var peg$e67 = peg$literalExpectation("RTI", true);
  var peg$e68 = peg$literalExpectation("RTS", true);
  var peg$e69 = peg$literalExpectation("SBC", true);
  var peg$e70 = peg$literalExpectation("SEC", true);
  var peg$e71 = peg$literalExpectation("SED", true);
  var peg$e72 = peg$literalExpectation("SEI", true);
  var peg$e73 = peg$literalExpectation("STA", true);
  var peg$e74 = peg$literalExpectation("STX", true);
  var peg$e75 = peg$literalExpectation("STY", true);
  var peg$e76 = peg$literalExpectation("STZ", true);
  var peg$e77 = peg$literalExpectation("TAX", true);
  var peg$e78 = peg$literalExpectation("TAY", true);
  var peg$e79 = peg$literalExpectation("TSX", true);
  var peg$e80 = peg$literalExpectation("TXA", true);
  var peg$e81 = peg$literalExpectation("TXS", true);
  var peg$e82 = peg$literalExpectation("TYA", true);
  var peg$f0 = function(o, a) {
    return { instruction: { opcode: o, arg: a } };
  };
  var peg$f1 = function(o, a) {
    return { instruction: { mode: "immediate", opcode: o, arg: a } };
  };
  var peg$f2 = function(o, a) {
    return { instruction: { mode: "indirect", opcode: o, arg: a } };
  };
  var peg$f3 = function(o, a) {
    return { instruction: { mode: "indirectX", opcode: o, arg: a } };
  };
  var peg$f4 = function(o, a) {
    return { instruction: { mode: "indirectY", opcode: o, arg: a } };
  };
  var peg$f5 = function(d, a) {
    return { directive: d.join(""), args: a };
  };
  var peg$f6 = function(l, o, r) {
    return { expression: { operator: o, left: l, right: r } };
  };
  var peg$f7 = function(c) {
    return { comment: c.join("") };
  };
  var peg$f8 = function(n) {
    return { label: n };
  };
  var peg$f9 = function(s) {
    return s.join("");
  };
  var peg$f10 = function(s) {
    return s.join("");
  };
  var peg$f11 = function(n) {
    return parseInt(n.join(""), 2);
  };
  var peg$f12 = function(n) {
    return parseInt(n.join(""));
  };
  var peg$f13 = function(n) {
    return parseInt(n.join(""), 16);
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;
  var peg$result;
  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error(
        `Can't start parsing from rule "` + options.startRule + '".'
      );
    }
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }
  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }
  function offset() {
    return peg$savedPos;
  }
  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }
  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }
  function expected(description, location2) {
    location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location2
    );
  }
  function error(message, location2) {
    location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildSimpleError(message, location2);
  }
  function peg$literalExpectation(text2, ignoreCase) {
    return { type: "literal", text: text2, ignoreCase };
  }
  function peg$classExpectation(parts, inverted, ignoreCase) {
    return {
      type: "class",
      parts,
      inverted,
      ignoreCase
    };
  }
  function peg$anyExpectation() {
    return { type: "any" };
  }
  function peg$endExpectation() {
    return { type: "end" };
  }
  function peg$otherExpectation(description) {
    return { type: "other", description };
  }
  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;
    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {
        }
      }
      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };
      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }
        p++;
      }
      peg$posDetailsCache[pos] = details;
      return details;
    }
  }
  function peg$computeLocation(startPos, endPos, offset2) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);
    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset2 && peg$source && typeof peg$source.offset === "function") {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }
  function peg$fail(expected2) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }
    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }
    peg$maxFailExpected.push(expected2);
  }
  function peg$buildSimpleError(message, location2) {
    return new peg$SyntaxError(message, null, null, location2);
  }
  function peg$buildStructuredError(expected2, found, location2) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected2, found),
      expected2,
      found,
      location2
    );
  }
  function peg$parsestart() {
    var s0, s1;
    s0 = [];
    s1 = peg$parseline();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseline();
    }
    return s0;
  }
  function peg$parseline() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parsenode();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s5 = peg$parsenode();
        if (s5 === peg$FAILED) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
      } else {
        s4 = s5;
      }
    }
    if (s3.length < 1) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e0);
        }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = [];
      s6 = peg$parse_();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse_();
      }
      s0 = s2;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parsenode() {
    var s0;
    s0 = peg$parselabel();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinstruction();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedirective();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecomment();
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s0 = peg$c0;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
            }
          }
        }
      }
    }
    return s0;
  }
  function peg$parseinstruction() {
    var s0;
    s0 = peg$parseimmediateInstruction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseindirectXInstruction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseindirectYInstruction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseindirectInstruction();
          if (s0 === peg$FAILED) {
            s0 = peg$parsegenericInstruction();
          }
        }
      }
    }
    return s0;
  }
  function peg$parsegenericInstruction() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = peg$parseopcode();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseargument();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f0(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseimmediateInstruction() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = peg$parseopcode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e1);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseargument();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f1(s1, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseindirectInstruction() {
    var s0, s1, s2, s3, s4, s5;
    s0 = peg$currPos;
    s1 = peg$parseopcode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e2);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseargument();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f2(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseindirectXInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    s0 = peg$currPos;
    s1 = peg$parseopcode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c2;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e2);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenumber();
          if (s5 === peg$FAILED) {
            s5 = peg$parsename();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c4;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s8 = input.charAt(peg$currPos);
              if (peg$r0.test(s8)) {
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s9 = peg$c3;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s9 !== peg$FAILED) {
                  s3 = s5;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseindirectYInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    s0 = peg$currPos;
    s1 = peg$parseopcode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c2;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e2);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenumber();
          if (s5 === peg$FAILED) {
            s5 = peg$parsename();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c3;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c4;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e4);
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = input.charAt(peg$currPos);
                if (peg$r1.test(s9)) {
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e6);
                  }
                }
                if (s9 !== peg$FAILED) {
                  s3 = s5;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parsedirective() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e7);
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsename();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseargumentlist();
      peg$savedPos = s0;
      s0 = peg$f5(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseexpression() {
    var s0, s1, s2, s3, s4, s5;
    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 === peg$FAILED) {
      s1 = peg$parsename();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseoperator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseexpression();
        if (s5 === peg$FAILED) {
          s5 = peg$parsenumber();
          if (s5 === peg$FAILED) {
            s5 = peg$parsename();
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f6(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseoperator() {
    var s0;
    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e8);
      }
    }
    return s0;
  }
  function peg$parsecomment() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 59) {
      s2 = peg$c6;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e9);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e9);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e10);
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e10);
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f7(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseargument() {
    var s0, s1;
    s0 = peg$parseindexedArg();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 === peg$FAILED) {
          s1 = peg$parsename();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestring();
          }
        }
        if (s1 !== peg$FAILED) {
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    return s0;
  }
  function peg$parseindexedArg() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = peg$parseexpression();
    if (s1 === peg$FAILED) {
      s1 = peg$parsenumber();
      if (s1 === peg$FAILED) {
        s1 = peg$parsename();
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e4);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = input.charAt(peg$currPos);
        if (peg$r4.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e11);
          }
        }
        if (s4 !== peg$FAILED) {
          s0 = [s1, s4];
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseargumentlist() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseargument();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseargdelimiter();
      if (s3 !== peg$FAILED) {
        s3 = peg$parseargument();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    s0 = s1;
    return s0;
  }
  function peg$parselabel() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = peg$parsename();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e12);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parsename() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r5.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e13);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r5.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e13);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9(s1);
    }
    s0 = s1;
    return s0;
  }
  function peg$parsestring() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e14);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e15);
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e14);
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parsenumber() {
    var s0;
    s0 = peg$parsehexnumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebinarynumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedecimalnumber();
      }
    }
    return s0;
  }
  function peg$parsebinarynumber() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e16);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e17);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r7.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e17);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parsedecimalnumber() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r8.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e18);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r8.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e18);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;
    return s0;
  }
  function peg$parsehexnumber() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e19);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e20);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r9.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e20);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parse_() {
    var s0, s1;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r10.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e21);
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r10.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e21);
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseargdelimiter() {
    var s0, s1, s2;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e4);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseopcode() {
    var s0;
    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c11) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e22);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 3);
      if (s0.toLowerCase() === peg$c12) {
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e23);
        }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 3);
        if (s0.toLowerCase() === peg$c13) {
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e24);
          }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 3);
          if (s0.toLowerCase() === peg$c14) {
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e25);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 3);
            if (s0.toLowerCase() === peg$c15) {
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e26);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 3);
              if (s0.toLowerCase() === peg$c16) {
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 3);
                if (s0.toLowerCase() === peg$c17) {
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                  }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 3);
                  if (s0.toLowerCase() === peg$c18) {
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e29);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = input.substr(peg$currPos, 3);
                    if (s0.toLowerCase() === peg$c19) {
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e30);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      s0 = input.substr(peg$currPos, 3);
                      if (s0.toLowerCase() === peg$c20) {
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e31);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        s0 = input.substr(peg$currPos, 3);
                        if (s0.toLowerCase() === peg$c21) {
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e32);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = input.substr(peg$currPos, 3);
                          if (s0.toLowerCase() === peg$c22) {
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e33);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            s0 = input.substr(peg$currPos, 3);
                            if (s0.toLowerCase() === peg$c23) {
                              peg$currPos += 3;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e34);
                              }
                            }
                            if (s0 === peg$FAILED) {
                              s0 = input.substr(peg$currPos, 3);
                              if (s0.toLowerCase() === peg$c24) {
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e35);
                                }
                              }
                              if (s0 === peg$FAILED) {
                                s0 = input.substr(peg$currPos, 3);
                                if (s0.toLowerCase() === peg$c25) {
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e36);
                                  }
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = input.substr(peg$currPos, 3);
                                  if (s0.toLowerCase() === peg$c26) {
                                    peg$currPos += 3;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$e37);
                                    }
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = input.substr(peg$currPos, 3);
                                    if (s0.toLowerCase() === peg$c27) {
                                      peg$currPos += 3;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$e38);
                                      }
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = input.substr(peg$currPos, 3);
                                      if (s0.toLowerCase() === peg$c28) {
                                        peg$currPos += 3;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$e39);
                                        }
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = input.substr(peg$currPos, 3);
                                        if (s0.toLowerCase() === peg$c29) {
                                          peg$currPos += 3;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$e40);
                                          }
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = input.substr(peg$currPos, 3);
                                          if (s0.toLowerCase() === peg$c30) {
                                            peg$currPos += 3;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$e41);
                                            }
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = input.substr(peg$currPos, 3);
                                            if (s0.toLowerCase() === peg$c31) {
                                              peg$currPos += 3;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$e42);
                                              }
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = input.substr(peg$currPos, 3);
                                              if (s0.toLowerCase() === peg$c32) {
                                                peg$currPos += 3;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                  peg$fail(peg$e43);
                                                }
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = input.substr(
                                                  peg$currPos,
                                                  3
                                                );
                                                if (s0.toLowerCase() === peg$c33) {
                                                  peg$currPos += 3;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) {
                                                    peg$fail(peg$e44);
                                                  }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = input.substr(
                                                    peg$currPos,
                                                    3
                                                  );
                                                  if (s0.toLowerCase() === peg$c34) {
                                                    peg$currPos += 3;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                      peg$fail(peg$e45);
                                                    }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = input.substr(
                                                      peg$currPos,
                                                      3
                                                    );
                                                    if (s0.toLowerCase() === peg$c35) {
                                                      peg$currPos += 3;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) {
                                                        peg$fail(peg$e46);
                                                      }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = input.substr(
                                                        peg$currPos,
                                                        3
                                                      );
                                                      if (s0.toLowerCase() === peg$c36) {
                                                        peg$currPos += 3;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                          peg$fail(peg$e47);
                                                        }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = input.substr(
                                                          peg$currPos,
                                                          3
                                                        );
                                                        if (s0.toLowerCase() === peg$c37) {
                                                          peg$currPos += 3;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) {
                                                            peg$fail(peg$e48);
                                                          }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = input.substr(
                                                            peg$currPos,
                                                            3
                                                          );
                                                          if (s0.toLowerCase() === peg$c38) {
                                                            peg$currPos += 3;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                              peg$fail(peg$e49);
                                                            }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = input.substr(
                                                              peg$currPos,
                                                              3
                                                            );
                                                            if (s0.toLowerCase() === peg$c39) {
                                                              peg$currPos += 3;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) {
                                                                peg$fail(
                                                                  peg$e50
                                                                );
                                                              }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = input.substr(
                                                                peg$currPos,
                                                                3
                                                              );
                                                              if (s0.toLowerCase() === peg$c40) {
                                                                peg$currPos += 3;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                  peg$fail(
                                                                    peg$e51
                                                                  );
                                                                }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = input.substr(
                                                                  peg$currPos,
                                                                  3
                                                                );
                                                                if (s0.toLowerCase() === peg$c41) {
                                                                  peg$currPos += 3;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) {
                                                                    peg$fail(
                                                                      peg$e52
                                                                    );
                                                                  }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = input.substr(
                                                                    peg$currPos,
                                                                    3
                                                                  );
                                                                  if (s0.toLowerCase() === peg$c42) {
                                                                    peg$currPos += 3;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                      peg$fail(
                                                                        peg$e53
                                                                      );
                                                                    }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = input.substr(
                                                                      peg$currPos,
                                                                      3
                                                                    );
                                                                    if (s0.toLowerCase() === peg$c43) {
                                                                      peg$currPos += 3;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) {
                                                                        peg$fail(
                                                                          peg$e54
                                                                        );
                                                                      }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = input.substr(
                                                                        peg$currPos,
                                                                        3
                                                                      );
                                                                      if (s0.toLowerCase() === peg$c44) {
                                                                        peg$currPos += 3;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                          peg$fail(
                                                                            peg$e55
                                                                          );
                                                                        }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = input.substr(
                                                                          peg$currPos,
                                                                          3
                                                                        );
                                                                        if (s0.toLowerCase() === peg$c45) {
                                                                          peg$currPos += 3;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) {
                                                                            peg$fail(
                                                                              peg$e56
                                                                            );
                                                                          }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = input.substr(
                                                                            peg$currPos,
                                                                            3
                                                                          );
                                                                          if (s0.toLowerCase() === peg$c46) {
                                                                            peg$currPos += 3;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                              peg$fail(
                                                                                peg$e57
                                                                              );
                                                                            }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = input.substr(
                                                                              peg$currPos,
                                                                              3
                                                                            );
                                                                            if (s0.toLowerCase() === peg$c47) {
                                                                              peg$currPos += 3;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) {
                                                                                peg$fail(
                                                                                  peg$e58
                                                                                );
                                                                              }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = input.substr(
                                                                                peg$currPos,
                                                                                3
                                                                              );
                                                                              if (s0.toLowerCase() === peg$c48) {
                                                                                peg$currPos += 3;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) {
                                                                                  peg$fail(
                                                                                    peg$e59
                                                                                  );
                                                                                }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = input.substr(
                                                                                  peg$currPos,
                                                                                  3
                                                                                );
                                                                                if (s0.toLowerCase() === peg$c49) {
                                                                                  peg$currPos += 3;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) {
                                                                                    peg$fail(
                                                                                      peg$e60
                                                                                    );
                                                                                  }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = input.substr(
                                                                                    peg$currPos,
                                                                                    3
                                                                                  );
                                                                                  if (s0.toLowerCase() === peg$c50) {
                                                                                    peg$currPos += 3;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) {
                                                                                      peg$fail(
                                                                                        peg$e61
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = input.substr(
                                                                                      peg$currPos,
                                                                                      3
                                                                                    );
                                                                                    if (s0.toLowerCase() === peg$c51) {
                                                                                      peg$currPos += 3;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) {
                                                                                        peg$fail(
                                                                                          peg$e62
                                                                                        );
                                                                                      }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = input.substr(
                                                                                        peg$currPos,
                                                                                        3
                                                                                      );
                                                                                      if (s0.toLowerCase() === peg$c52) {
                                                                                        peg$currPos += 3;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) {
                                                                                          peg$fail(
                                                                                            peg$e63
                                                                                          );
                                                                                        }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = input.substr(
                                                                                          peg$currPos,
                                                                                          3
                                                                                        );
                                                                                        if (s0.toLowerCase() === peg$c53) {
                                                                                          peg$currPos += 3;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) {
                                                                                            peg$fail(
                                                                                              peg$e64
                                                                                            );
                                                                                          }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = input.substr(
                                                                                            peg$currPos,
                                                                                            3
                                                                                          );
                                                                                          if (s0.toLowerCase() === peg$c54) {
                                                                                            peg$currPos += 3;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) {
                                                                                              peg$fail(
                                                                                                peg$e65
                                                                                              );
                                                                                            }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = input.substr(
                                                                                              peg$currPos,
                                                                                              3
                                                                                            );
                                                                                            if (s0.toLowerCase() === peg$c55) {
                                                                                              peg$currPos += 3;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) {
                                                                                                peg$fail(
                                                                                                  peg$e66
                                                                                                );
                                                                                              }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = input.substr(
                                                                                                peg$currPos,
                                                                                                3
                                                                                              );
                                                                                              if (s0.toLowerCase() === peg$c56) {
                                                                                                peg$currPos += 3;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) {
                                                                                                  peg$fail(
                                                                                                    peg$e67
                                                                                                  );
                                                                                                }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = input.substr(
                                                                                                  peg$currPos,
                                                                                                  3
                                                                                                );
                                                                                                if (s0.toLowerCase() === peg$c57) {
                                                                                                  peg$currPos += 3;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) {
                                                                                                    peg$fail(
                                                                                                      peg$e68
                                                                                                    );
                                                                                                  }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = input.substr(
                                                                                                    peg$currPos,
                                                                                                    3
                                                                                                  );
                                                                                                  if (s0.toLowerCase() === peg$c58) {
                                                                                                    peg$currPos += 3;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) {
                                                                                                      peg$fail(
                                                                                                        peg$e69
                                                                                                      );
                                                                                                    }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = input.substr(
                                                                                                      peg$currPos,
                                                                                                      3
                                                                                                    );
                                                                                                    if (s0.toLowerCase() === peg$c59) {
                                                                                                      peg$currPos += 3;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) {
                                                                                                        peg$fail(
                                                                                                          peg$e70
                                                                                                        );
                                                                                                      }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = input.substr(
                                                                                                        peg$currPos,
                                                                                                        3
                                                                                                      );
                                                                                                      if (s0.toLowerCase() === peg$c60) {
                                                                                                        peg$currPos += 3;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) {
                                                                                                          peg$fail(
                                                                                                            peg$e71
                                                                                                          );
                                                                                                        }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = input.substr(
                                                                                                          peg$currPos,
                                                                                                          3
                                                                                                        );
                                                                                                        if (s0.toLowerCase() === peg$c61) {
                                                                                                          peg$currPos += 3;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) {
                                                                                                            peg$fail(
                                                                                                              peg$e72
                                                                                                            );
                                                                                                          }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = input.substr(
                                                                                                            peg$currPos,
                                                                                                            3
                                                                                                          );
                                                                                                          if (s0.toLowerCase() === peg$c62) {
                                                                                                            peg$currPos += 3;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) {
                                                                                                              peg$fail(
                                                                                                                peg$e73
                                                                                                              );
                                                                                                            }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = input.substr(
                                                                                                              peg$currPos,
                                                                                                              3
                                                                                                            );
                                                                                                            if (s0.toLowerCase() === peg$c63) {
                                                                                                              peg$currPos += 3;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) {
                                                                                                                peg$fail(
                                                                                                                  peg$e74
                                                                                                                );
                                                                                                              }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = input.substr(
                                                                                                                peg$currPos,
                                                                                                                3
                                                                                                              );
                                                                                                              if (s0.toLowerCase() === peg$c64) {
                                                                                                                peg$currPos += 3;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) {
                                                                                                                  peg$fail(
                                                                                                                    peg$e75
                                                                                                                  );
                                                                                                                }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = input.substr(
                                                                                                                  peg$currPos,
                                                                                                                  3
                                                                                                                );
                                                                                                                if (s0.toLowerCase() === peg$c65) {
                                                                                                                  peg$currPos += 3;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) {
                                                                                                                    peg$fail(
                                                                                                                      peg$e76
                                                                                                                    );
                                                                                                                  }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = input.substr(
                                                                                                                    peg$currPos,
                                                                                                                    3
                                                                                                                  );
                                                                                                                  if (s0.toLowerCase() === peg$c66) {
                                                                                                                    peg$currPos += 3;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) {
                                                                                                                      peg$fail(
                                                                                                                        peg$e77
                                                                                                                      );
                                                                                                                    }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = input.substr(
                                                                                                                      peg$currPos,
                                                                                                                      3
                                                                                                                    );
                                                                                                                    if (s0.toLowerCase() === peg$c67) {
                                                                                                                      peg$currPos += 3;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) {
                                                                                                                        peg$fail(
                                                                                                                          peg$e78
                                                                                                                        );
                                                                                                                      }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = input.substr(
                                                                                                                        peg$currPos,
                                                                                                                        3
                                                                                                                      );
                                                                                                                      if (s0.toLowerCase() === peg$c68) {
                                                                                                                        peg$currPos += 3;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) {
                                                                                                                          peg$fail(
                                                                                                                            peg$e79
                                                                                                                          );
                                                                                                                        }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = input.substr(
                                                                                                                          peg$currPos,
                                                                                                                          3
                                                                                                                        );
                                                                                                                        if (s0.toLowerCase() === peg$c69) {
                                                                                                                          peg$currPos += 3;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) {
                                                                                                                            peg$fail(
                                                                                                                              peg$e80
                                                                                                                            );
                                                                                                                          }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = input.substr(
                                                                                                                            peg$currPos,
                                                                                                                            3
                                                                                                                          );
                                                                                                                          if (s0.toLowerCase() === peg$c70) {
                                                                                                                            peg$currPos += 3;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) {
                                                                                                                              peg$fail(
                                                                                                                                peg$e81
                                                                                                                              );
                                                                                                                            }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = input.substr(
                                                                                                                              peg$currPos,
                                                                                                                              3
                                                                                                                            );
                                                                                                                            if (s0.toLowerCase() === peg$c71) {
                                                                                                                              peg$currPos += 3;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) {
                                                                                                                                peg$fail(
                                                                                                                                  peg$e82
                                                                                                                                );
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return s0;
  }
  peg$result = peg$startRuleFunction();
  if (options.peg$library) {
    return (
      /** @type {any} */
      {
        peg$result,
        peg$currPos,
        peg$FAILED,
        peg$maxFailExpected,
        peg$maxFailPos
      }
    );
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }
    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// node_modules/asm6502/src/opcodes.js
var Opcodes = [
  /* Name, Imm,  ZP,   ZPX,  ZPY,  ABS, ABSX, ABSY,  IND, INDX, INDY, SNGL, BRA */
  [
    "ADC",
    105,
    101,
    117,
    null,
    109,
    125,
    121,
    null,
    97,
    113,
    null,
    null
  ],
  [
    "AND",
    41,
    37,
    53,
    null,
    45,
    61,
    57,
    null,
    33,
    49,
    null,
    null
  ],
  [
    "ASL",
    null,
    6,
    22,
    null,
    14,
    30,
    null,
    null,
    null,
    null,
    10,
    null
  ],
  [
    "BIT",
    null,
    36,
    null,
    null,
    44,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "BPL",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    16
  ],
  [
    "BMI",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    48
  ],
  [
    "BVC",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    80
  ],
  [
    "BVS",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    112
  ],
  [
    "BCC",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    144
  ],
  [
    "BCS",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    176
  ],
  [
    "BNE",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    208
  ],
  [
    "BEQ",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    240
  ],
  [
    "BRK",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    0,
    null
  ],
  [
    "CMP",
    201,
    197,
    213,
    null,
    205,
    221,
    217,
    null,
    193,
    209,
    null,
    null
  ],
  [
    "CPX",
    224,
    228,
    null,
    null,
    236,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "CPY",
    192,
    196,
    null,
    null,
    204,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "DEC",
    null,
    198,
    214,
    null,
    206,
    222,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "EOR",
    73,
    69,
    85,
    null,
    77,
    93,
    89,
    null,
    65,
    81,
    null,
    null
  ],
  [
    "CLC",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    24,
    null
  ],
  [
    "SEC",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    56,
    null
  ],
  [
    "CLI",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    88,
    null
  ],
  [
    "SEI",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    120,
    null
  ],
  [
    "CLV",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    184,
    null
  ],
  [
    "CLD",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    216,
    null
  ],
  [
    "SED",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    248,
    null
  ],
  [
    "INC",
    null,
    230,
    246,
    null,
    238,
    254,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "JMP",
    null,
    null,
    null,
    null,
    76,
    null,
    null,
    108,
    null,
    null,
    null,
    null
  ],
  [
    "JSR",
    null,
    null,
    null,
    null,
    32,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "LDA",
    169,
    165,
    181,
    null,
    173,
    189,
    185,
    null,
    161,
    177,
    null,
    null
  ],
  [
    "LDX",
    162,
    166,
    null,
    182,
    174,
    null,
    190,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "LDY",
    160,
    164,
    180,
    null,
    172,
    188,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "LSR",
    null,
    70,
    86,
    null,
    78,
    94,
    null,
    null,
    null,
    null,
    74,
    null
  ],
  [
    "NOP",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    234,
    null
  ],
  [
    "ORA",
    9,
    5,
    21,
    null,
    13,
    29,
    25,
    null,
    1,
    17,
    null,
    null
  ],
  [
    "TAX",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    170,
    null
  ],
  [
    "TXA",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    138,
    null
  ],
  [
    "DEX",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    202,
    null
  ],
  [
    "INX",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    232,
    null
  ],
  [
    "TAY",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    168,
    null
  ],
  [
    "TYA",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    152,
    null
  ],
  [
    "DEY",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    136,
    null
  ],
  [
    "INY",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    200,
    null
  ],
  [
    "ROR",
    null,
    102,
    118,
    null,
    110,
    126,
    null,
    null,
    null,
    null,
    106,
    null
  ],
  [
    "ROL",
    null,
    38,
    54,
    null,
    46,
    62,
    null,
    null,
    null,
    null,
    42,
    null
  ],
  [
    "RTI",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    64,
    null
  ],
  [
    "RTS",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    96,
    null
  ],
  [
    "SBC",
    233,
    229,
    245,
    null,
    237,
    253,
    249,
    null,
    225,
    241,
    null,
    null
  ],
  [
    "STA",
    null,
    133,
    149,
    null,
    141,
    157,
    153,
    null,
    129,
    145,
    null,
    null
  ],
  [
    "TXS",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    154,
    null
  ],
  [
    "TSX",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    186,
    null
  ],
  [
    "PHA",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    72,
    null
  ],
  [
    "PLA",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    104,
    null
  ],
  [
    "PHP",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    8,
    null
  ],
  [
    "PLP",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    40,
    null
  ],
  [
    "STX",
    null,
    134,
    null,
    150,
    142,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "STY",
    null,
    132,
    148,
    null,
    140,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  [
    "---",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ]
];

// node_modules/asm6502/src/generator.js
var globalEnv = {};
var labels = {};
var PC = 0;
var PCSet = false;
var enumSaveAdr = 0;
var pass = 1;
var localLabels = {};
var currentLabel = null;
function isSymbolDef(node) {
  return Object.hasOwn(node, "expression") && Object.hasOwn(node.expression, "operator") && node.expression.operator === "=";
}
function isLabel(node) {
  return Object.hasOwn(node, "label");
}
function isInstruction(node) {
  return Object.hasOwn(node, "instruction");
}
function isDirective(node) {
  return Object.hasOwn(node, "directive");
}
function generateDirective(node) {
  switch (node.directive) {
    case ".byte":
      let bytes = [];
      for (var i = 0; i < node.args.length; i++) {
        const val = resolveArg(node.args[i]);
        bytes.push(typeof val === "string" ? null : val);
      }
      PC += node.args.length;
      return bytes;
    case ".word":
      let words = [];
      for (var i = 0; i < node.args.length; i++) {
        const val = resolveArg(node.args[i]);
        if (typeof val === "string") {
          words.push(null, null);
        } else {
          words.push(val & 255, val >> 8 & 255);
        }
      }
      PC += node.args.length * 2;
      return words;
    case ".enum":
      enumSaveAdr = PC;
      PC = node.args[0];
      break;
    case ".org":
      if (PCSet === false) {
        PC = node.args[0];
        PCSet = true;
        break;
      } else {
        const currentPC = PC;
        PC = node.args[0];
        return new Array(node.args[0] - currentPC).fill(0);
      }
    case ".align":
      const padding = new Array(PC % node.args[0] - PC).fill(0);
      PC += padding.length;
      return padding;
    case ".ende":
      PC = enumSaveAdr;
      break;
    case ".dsb":
      PC += node.args[0];
      break;
  }
}
function assignLabel(node) {
  if (pass == 1 && Object.hasOwn(labels, node.label)) {
    throw new Error("Duplicate label: " + node.label);
  }
  labels[node.label] = PC;
}
function assignLocalLabel(node) {
  if (!Object.hasOwn(localLabels, currentLabel)) {
    localLabels[currentLabel] = {};
  }
  localLabels[currentLabel][node.label] = PC;
}
function isZeropage(instruction) {
  const value = resolveArg(instruction.arg);
  return value >= 0 && value < 256;
}
function isIndirectY(instruction) {
  return instruction.mode === "indirectY";
}
function isIndirectX(instruction) {
  return instruction.mode === "indirectX";
}
function isIndirect(instruction) {
  return instruction.mode === "indirect";
}
function isImmediate(instruction) {
  return instruction.mode === "immediate";
}
function isAbsolute(instruction) {
  if (instruction.mode === "indirect") {
    return false;
  }
  if (instruction.opcode.toUpperCase() === "JSR") {
    return true;
  }
  if (instruction.opcode.toUpperCase() === "JMP") {
    return true;
  }
  let val = resolveArg(instruction.arg);
  return typeof val === "number" && val > 255;
}
function isImplied(instruction) {
  const implied = /* @__PURE__ */ new Set([
    "brk",
    "clc",
    "sec",
    "cli",
    "sei",
    "clv",
    "cld",
    "sed",
    "nop",
    "tax",
    "txa",
    "dex",
    "inx",
    "tay",
    "tya",
    "dey",
    "iny",
    "rti",
    "rts",
    "txs",
    "tsx",
    "pha",
    "pla",
    "php",
    "plp"
  ]);
  if (instruction.arg !== null && instruction.opcode.toLowerCase() === "asl" && instruction.arg.toLowerCase() === "a") {
    return true;
  }
  return instruction.arg === null;
}
function isBranch(instruction) {
  const branch = /* @__PURE__ */ new Set([
    "bpl",
    "bmi",
    "bvc",
    "bvs",
    "bcc",
    "bcs",
    "bne",
    "beq"
  ]);
  return branch.has(instruction.opcode.toLowerCase());
}
function isIndexed(instruction) {
  if (instruction.arg === null) {
    return false;
  }
  return Array.isArray(instruction.arg) && (instruction.arg[1] === "x" || instruction.arg[1] === "y");
}
function evaluateExpression(exp) {
  const left = resolveLabel(exp.expression.left);
  const right = resolveLabel(exp.expression.right);
  if (typeof left === "string" || typeof right === "string") {
    return exp;
  }
  if (exp.expression.operator === "+") {
    return left + right;
  }
  return exp;
}
function resolveArg(arg) {
  if (arg === null) {
    return null;
  }
  if (typeof arg === "string") {
    if (Object.hasOwn(globalEnv, arg)) {
      return globalEnv[arg];
    }
    return resolveLabel(arg);
  }
  if (typeof arg === "object" && !Array.isArray(arg)) {
    return arg = evaluateExpression(arg);
  }
  if (typeof arg === "number") {
    return arg;
  }
}
function resolveLabel(arg) {
  if (arg[0] === "@" && localLabels[currentLabel]) {
    return typeof arg === "string" && Object.hasOwn(localLabels[currentLabel], arg) ? localLabels[currentLabel][arg] : arg;
  } else {
    return typeof arg === "string" && Object.hasOwn(labels, arg) ? labels[arg] : arg;
  }
}
function generateInstruction(node) {
  let mode, opcode, arg;
  arg = resolveArg(node.instruction.arg);
  if (isZeropage(node.instruction)) {
    mode = "zeropage";
  }
  if (isImmediate(node.instruction)) {
    mode = "immediate";
  }
  if (isIndexed(node.instruction)) {
    mode = "indexed";
  }
  if (isIndirect(node.instruction)) {
    mode = "indirect";
  }
  if (isAbsolute(node.instruction)) {
    mode = "absolute";
  }
  if (isIndirectY(node.instruction)) {
    mode = "indirectY";
  }
  if (isIndirectX(node.instruction)) {
    mode = "indirectX";
  }
  if (isImplied(node.instruction)) {
    mode = "implied";
  }
  if (isBranch(node.instruction)) {
    mode = "branch";
  }
  for (var o = 0; o < Opcodes.length; o++) {
    if (Opcodes[o][0] === node.instruction.opcode.toUpperCase()) {
      switch (mode) {
        case "immediate":
          opcode = Opcodes[o][1];
          arg = resolveArg(node.instruction.arg);
          PC += 2;
          return typeof arg === "string" ? node : [opcode, arg];
        case "zeropage":
          opcode = Opcodes[o][2];
          arg = resolveArg(node.instruction.arg);
          PC += 2;
          return [opcode, arg];
        case "absolute":
          opcode = Opcodes[o][5];
          arg = resolveArg(node.instruction.arg);
          PC += 3;
          if (typeof arg === "string" || typeof arg === "object") {
            return [opcode, null, null];
          } else {
            return [opcode, arg & 255, arg >> 8 & 255];
          }
        case "indexed":
          const arg1 = resolveArg(node.instruction.arg[0]);
          const arg2 = node.instruction.arg[1];
          if (typeof arg1 === "string") {
            PC += 3;
            return node;
          } else {
            if (arg1 >= 0 && arg1 < 256) {
              PC += 2;
              return [
                arg2 === "x" ? (Opcodes[o][3], arg1) : (Opcodes[o][4], arg1)
              ];
            } else {
              PC += 3;
              if (arg2 === "x") {
                return [Opcodes[o][6], arg1 & 255, arg1 >> 8 & 255];
              } else {
                return [Opcodes[o][7], arg1 & 255, arg1 >> 8 & 255];
              }
            }
          }
          break;
        case "indirect":
          PC += 3;
          arg = resolveArg(node.instruction.arg);
          const arg_lo = arg & 255;
          const arg_hi = arg >> 8 & 255;
          return [Opcodes[o][8], arg_lo, arg_hi];
          break;
        case "indirectX":
          PC += 2;
          return [Opcodes[o][9], resolveArg(node.instruction.arg)];
          break;
        case "indirectY":
          PC += 2;
          return [Opcodes[o][10], resolveArg(node.instruction.arg)];
          break;
        case "implied":
          opcode = Opcodes[o][11];
          PC++;
          return [opcode];
        case "branch":
          opcode = Opcodes[o][12];
          arg = resolveArg(node.instruction.arg);
          PC++;
          let val;
          if (arg < PC) {
            val = 255 - (PC - arg) & 255;
          } else {
            val = arg - PC - 1 & 255;
          }
          PC++;
          return [opcode, val];
        default:
          return node;
      }
    }
  }
}
function process(code) {
  let result = [];
  for (var i = 0; i < code.length; i++) {
    if (isDirective(code[i])) {
      const output = generateDirective(code[i]);
      if (typeof output !== "undefined") {
        result.push(output);
      }
    }
    if (isSymbolDef(code[i])) {
      globalEnv[code[i].expression.left] = code[i].expression.right;
    }
    if (isLabel(code[i])) {
      if (code[i].label[0] === "@") {
        assignLocalLabel(code[i]);
      } else {
        assignLabel(code[i]);
        currentLabel = code[i].label;
      }
    }
    if (isInstruction(code[i])) {
      const instruction = generateInstruction(code[i]);
      result.push(instruction);
    }
  }
  return result;
}
function gen1(code) {
  PC = 0;
  PCSet = false;
  const ast = peg$parse(code);
  let result = [];
  for (var i = 0; i < ast.length; i++) {
    result.push(process(ast[i]));
  }
  return result;
}
function mesenLabels(labels2, localLabels2) {
  for (const scope in localLabels2) {
    for (const label in localLabels2[scope]) {
      if (Object.hasOwn(labels2, label)) {
        labels2["@" + scope + "_" + label.slice(1)] = localLabels2[scope][label];
      } else {
        labels2[label] = localLabels2[scope][label];
      }
    }
  }
  let result = "";
  for (const label in labels2) {
    if (labels2[label] >= 32768) {
      const val = labels2[label] - 32768;
      const adr = String(val.toString(16)).padStart(4, "0");
      result += "NesPrgRom:" + adr + ":" + label + "\n";
    } else {
      const val = labels2[label];
      const adr = String(val.toString(16)).padStart(4, "0");
      result += "NesInternalRam:" + adr + ":" + label + "\n";
    }
  }
  return result;
}
function generate(code) {
  labels = {};
  localLabels = {};
  currentLabel = null;
  pass = 1;
  gen1(code, 1);
  pass = 2;
  const bytecode = gen1(code, 2).flat(2);
  return {
    bytecode,
    labels,
    mesenLabels: mesenLabels(labels, localLabels)
  };
}

// node_modules/asm6502/index.js
var assemble = generate;
export {
  assemble
};
//# sourceMappingURL=asm6502.js.map
